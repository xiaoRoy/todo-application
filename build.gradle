import com.learn.todo.build.ProjectVersion
import com.learn.todo.build.ReleaseVersionTask
import com.learn.todo.build.ReleaseVersionListener

plugins {
    id 'war'
}

version = new ProjectVersion(0, 1)
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
    cargo {
        description = 'Classpath for Cargo Ant tasks.'
        visible = false
    }
}

jar {
    manifest {
        attributes 'Main-Class': "com.learn.todo.TodoApplication"
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
    }
}

project.ext.what = 'what'

ext {
    where = 'where'
    groupLearnGradle = 'learning gradle'
    versionFile = file('version.properties')
}

task assertExtraProperties {
    doLast {
        assert what == 'what'
        assert project.what == 'what'
        assert where == 'where'
        assert project.ext.where == 'where'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.5.1'
    distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

task printGradleProperties {
    doLast {
        println "MajorVersion:$major"
        println "MinorVersion:$project.minor"
    }
}

task showVersion(group: 'version info', description: 'show project version') {
    doLast {
        logger.quiet "Version: $version"
    }
}

showVersion.doFirst { println "Added Action" }

task first(group: project.groupLearnGradle) {
    doLast {
        println 'first step'
    }
}

task second(group: groupLearnGradle) {
    doLast {
        println 'second step'
    }
}

task showVersionWithDependency(group: 'version info', dependsOn: [second, first]) {
    doLast {
        logger.quiet "Version: $version"
    }
}

task third(group: groupLearnGradle) {
    doLast {
        println "third"
    }
}
third.dependsOn 'showVersionWithDependency'

task setup(group: groupLearnGradle) {
    doLast {
        println 'setup'
    }
}

task cleanup(group: groupLearnGradle) {
    doLast {
        println 'setup'
    }
}
setup.finalizedBy cleanup

task loadVersion(group: groupLearnGradle) {
    logger.quiet 'Reading the version file.'
    if (!project.versionFile.exists()) {
        throw new GradleException("Require version file does not exist: $versionFile.canonicalFile")
    }
    Properties versionProperties = new Properties()
    versionFile.withInputStream { stream ->
        versionProperties.load(stream)
    }
    //noinspection GroovyAssignabilityCheck
    project.version = new ProjectVersion(
            versionProperties.major.toInteger(),
            versionProperties.minor.toInteger(),
            versionProperties.release.toBoolean()
    )
}

task makeReleaseVersion(group: 'version info', description: 'Make project a release version') {
    inputs.property('release', version.isRelease)
    outputs.file versionFile
    doLast {
        version.isRelease = true
        ant.propertyfile(file: versionFile) {
            entry(key: 'release', type: 'string', operation: '=', value: 'true')
        }
    }
}

task makeReleaseVersionWithCustomTask(type: ReleaseVersionTask) {
    isRelease = version.isRelease
    versionFile = project.versionFile
}

task createDistribution(type: Zip, description: makeReleaseVersion) {
    from war.outputs.files
    from(sourceSets*.allSource) {
        into 'src'
    }
    from(rootDir) {
        include versionFile.name
    }
}

task backupReleaseDistribution(type: Copy) {
    from createDistribution.outputs.files
    into "$buildDir/backup"
}


task release(dependsOn: backupReleaseDistribution) {
    doLast {
        logger.quiet 'Releasing the project...'
    }
}

task incrementMajorVersion(group: 'version info', description: 'Increments project major version') {
    doLast {
        def currentVersion = version.toString()
        ++version.major
        def newVersion = version.toString()
        logger.info("Incrementing major project version: $currentVersion -> $newVersion")
        ant.propertyfile(file: versionFile) {
            entry(key: 'major', type: 'int', operation: '+', value: 1)
        }
    }
}

/*
* task('incrementMinorVersion') doLast {
    ...
}
* */
task incrementMinorVersion(group: 'version info', description: 'Increments projects minor version') {
    doLast {
        def currentVersion = version.toString()
        ++version.minor
        def newVersion = version.toString()
        logger.info("Increment minor project version: $currentVersion -> $newVersion")
        ant.propertyfile(file: versionFile) {
            entry(key: 'minor', type: 'int', operation: '+', value: 1)
        }
    }
}

//TaskContainer
tasks.addRule('Pattern: increment<Classifier>Version - Increment the project version classifier.') {
    String taskName ->
        String increment = 'increment'
        String version = 'Version'
        if (taskName.startsWith(increment) && taskName.endsWith(increment)) {
            task(taskName) doLast {
                String classifier = (taskName - increment - version).toLowerCase()
                String currentVersion = version.toString()
                switch (classifier) {
                    case 'major':
                        ++version.major
                        break
                    case 'minor':
                        ++version.minor
                        break
                    default:
                        throw new GradleException("Invalid version type '$classifier'. Allowed types:['Major', 'Minor']")
                }
                String newVersion = version.toString()
                logger.info("Increment $classifier project version: $currentVersion -> $newVersion")
                ant.propertyfile(file: versionFile) {
                    entry(key: classifier, type: 'int', operation: '+', value: 1)
                }
            }
        }

}

gradle.taskGraph.whenReady { TaskExecutionGraph taskExecutionGraph ->
    if (taskExecutionGraph.hasTask(release) && !version.isRelease) {
        version.isRelease true
        ant.propertyfile(file: versionFile) {
            entry(key: 'isRelease', type: 'string', operation: '=', value: 'true')
        }
    }
}

gradle.taskGraph.addTaskExecutionGraphListener(new ReleaseVersionListener())

/*
* 5.3.3 Accessing a configuration
* */

task deployToTomcat {
    doLast {
        FileTree cargoDependency = configurations.getByName('cargo').asFileTree
        ant.taskdef(resource: 'cargo.tasks', classpath: cargoDependency.asPath)
        ant.cargo(containerId: 'tomcat7x', action: 'run', output: "$buildDir/output.log") {
            configuration {
                deployable(type: 'war', file: 'todo.war')
            }
            zipUrlInstaller(installUrl:'http://mirrors.shu.edu.cn/apache/tomcat/tomcat-7/v7.0.91/bin/apache-tomcat-7.0.91-deployer.zip')
        }

    }
}
