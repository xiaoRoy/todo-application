import com.learn.todo.build.ProjectVersion
import com.learn.todo.build.ReleaseVersionTask

apply plugin: 'java'

version = new ProjectVersion(0, 1)
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

jar {
    manifest {
        attributes 'Main-Class': "com.learn.todo.TodoApplication"
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
    }
}

project.ext.what = 'what'

ext {
    where = 'where'
    groupLearnGradle = 'learning gradle'
    versionFile = file('version.properties')
}

task assertExtraProperties {
    doLast {
        assert what == 'what'
        assert project.what == 'what'
        assert where == 'where'
        assert project.ext.where == 'where'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.5.1'
    distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

task printGradleProperties {
    doLast {
        println "MajorVersion:$major"
        println "MinorVersion:$project.minor"
    }
}

task showVersion(group: 'version info', description: 'show project version') {
    doLast {
        logger.quiet "Version: $version"
    }
}

showVersion.doFirst { println "Added Action" }

task first(group: project.groupLearnGradle) {
    doLast {
        println 'first step'
    }
}

task second(group: groupLearnGradle) {
    doLast {
        println 'second step'
    }
}

task showVersionWithDependency(group: 'version info', dependsOn: [second, first]) {
    doLast {
        logger.quiet "Version: $version"
    }
}

task third(group: groupLearnGradle) {
    doLast {
        println "third"
    }
}
third.dependsOn 'showVersionWithDependency'

task setup(group: groupLearnGradle) {
    doLast {
        println 'setup'
    }
}

task cleanup(group: groupLearnGradle) {
    doLast {
        println 'setup'
    }
}
setup.finalizedBy cleanup

task loadVersion(group: groupLearnGradle) {
    logger.quiet 'Reading the version file.'
    if (!project.versionFile.exists()) {
        throw new GradleException("Require version file does not exist: $versionFile.canonicalFile")
    }
    Properties versionProperties = new Properties()
    versionFile.withInputStream { stream ->
        versionProperties.load(stream)
    }
    //noinspection GroovyAssignabilityCheck
    project.version = new ProjectVersion(
            versionProperties.major.toInteger(),
            versionProperties.minor.toInteger(),
            versionProperties.release.toBoolean()
    )
}

task makeReleaseVersion(group: 'version info', description: 'Make project a release version'){
    inputs.property('release', version.isRelease)
    outputs.file versionFile
    doLast{
        version.isRelease = true
        ant.propertyfile(file: versionFile){
            entry(key: 'release', type: 'string', operation: '=', value: 'true')
        }
    }
}

task makeReleaseVersionWithCustomTask(type: ReleaseVersionTask){
    isRelease = version.isRelease
    versionFile = project.versionFile
}

task createDistribution(type: Zip, description: makeReleaseVersion){
    from war.ouputs.files
    from (sourceSets*.allSouce){
        into 'src'
    }
    from(rootDir){
        include versionFile.name
    }
}
